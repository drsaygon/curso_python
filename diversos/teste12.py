# Defini√ß√£o dos m√≥dulos de c√°lculo
class ModuloA:
    def __soma(self, a, b):
        return a + b

    def acessar_soma(self, a, b):
        # Regra de controle: evita somas acima de 10.000
        if a + b > 10000:
            raise ValueError("Valor muito alto!")
        return self.__soma(a, b)

# ‚úÖ Mais flex√≠vel: ModuloA pode ser substitu√≠do ou modificado sem impactar Calculations. 
# ‚úÖ Segue o princ√≠pio de composi√ß√£o sobre heran√ßa (recomendado por boas pr√°ticas). 
# ‚úÖ Facilita testes e manuten√ß√£o, pois cada classe tem um papel bem definido. 
# üö´ Pode exigir um pouco mais de c√≥digo para acessar m√©todos herdados.

# Classe principal que re√∫ne os m√≥dulos
class Calculations:
    def __init__(self):
        self.moduloA = ModuloA()

    def calcular(self, num1, num2):
        return self.moduloA.acessar_soma(num1, num2)  # Controle garantido

# Testando
calc = Calculations()
print(f'C√°lculo: {calc.calcular(5,5)}')

# teste = ModuloA().__soma(5,5)
teste = ModuloA().acessar_soma(5,5)

